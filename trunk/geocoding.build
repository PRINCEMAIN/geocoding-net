<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <projectName>GeoCoding.Net</projectName>
    <company>GeoCoding.Net</company>
    <copyright>Copyright Â© 2008 - 2011 Chad Lee</copyright>
    <major>1</major>
    <minor>4</minor>
    <build Condition="'$(BUILD_NUMBER)'==''">0</build>
    <build Condition="'$(BUILD_NUMBER)'!=''">$(BUILD_NUMBER)</build>
  </PropertyGroup>

  <!-- Define order of solutions to build -->
  <ItemGroup>
    <vssolutions Include="src\GeoCoding.Net.sln" />
  </ItemGroup>

  <!-- Define outputs -->
  <ItemGroup>
    <binaryOutput Include="src\Core\Core.csproj">
      <zipName>geocoding.net</zipName>
    </binaryOutput>
  </ItemGroup>

  <PropertyGroup>
    <!-- default configuration is "Debug"; the other is "Release" -->
    <configuration Condition="'$(configuration)'==''">Debug</configuration>

    <buildDir Condition="'$(buildDir)'==''">$(MSBuildProjectDirectory)\build\$(configuration)</buildDir>
    <libDir>$(MSBuildThisFileDirectory)lib\</libDir>

    <includeDependencyOutput Condition="'$(includeDependencyOutput)'==''">false</includeDependencyOutput>

    <MSBuildCommunityTasksPath>$(libDir)MsBuild</MSBuildCommunityTasksPath>
    <svnToolPath Condition="'$(svnToolPath)'==''">C:\Program Files (x86)\VisualSVN\bin</svnToolPath>
  </PropertyGroup>

  <Import Project="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.Targets" />
  <UsingTask AssemblyFile="$(libDir)Xunit\xunit.runner.msbuild.dll" TaskName="Xunit.Runner.MSBuild.xunit" />

  <!-- ========= Private Targets ===================================================== -->

  <Target Name="_CopyOutputToTempDir">
    <!-- copy binary output to build temp directory -->
    <CreateItem Include="@(binaryOutput -> '%(RootDir)%(Directory)bin\$(Configuration)\**\*.*')" AdditionalMetadata="ZipName=%(binaryOutput.zipName)">
      <Output TaskParameter="Include" ItemName="binaryOutputToCopy" />
    </CreateItem>
    <Copy SourceFiles="@(binaryOutputToCopy)" DestinationFiles="@(binaryOutputToCopy -> '$(buildDir)\temp\%(ZipName)\%(RecursiveDir)%(Filename)%(Extension)')" />

    <!-- copy web output to build temp directory -->
    <MSBuild Projects="@(webOutput)" Targets="PipelinePreDeployCopyAllFilesToOneFolder" Properties="Configuration=$(configuration);_PackageTempDir=$(buildDir)\temp\%(webOutput.Filename)" />
  </Target>

  <Target Name="_RemoveTempDir">
    <!-- delete temporary build directory -->
    <RemoveDir Directories="$(buildDir)\temp" ContinueOnError="true" />
  </Target>

  <Target Name="_CleanBuildDir">
    <RemoveDir Directories="$(buildDir)" />
  </Target>

  <Target Name="_ZipBinaryOutput" Condition="@(binaryOutput) != ''">
    <!-- create an item group of files for each binary output project specified -->
    <CreateItem Include="$(buildDir)\temp\%(binaryOutput.zipName)\**\*.*" AdditionalMetadata="ZipName=%(binaryOutput.zipName)">
      <Output TaskParameter="Include" ItemName="binaryZipOutput" />
    </CreateItem>

    <!-- zip that shit up -->
    <Zip Files="@(binaryZipOutput)" ZipFileName="$(buildDir)\%(binaryZipOutput.ZipName)_$(configuration)_v$(versionString).zip" WorkingDirectory="$(buildDir)\temp\%(binaryZipOutput.ZipName)" />
  </Target>

  <Target Name="_ZipWebOutput" Condition="@(webOutput) != ''">
    <!-- create an item group of files for each web output -->
    <!-- (it is located in a weird directory structure) -->
    <CreateItem Include="$(buildDir)\temp\%(webOutput.Filename)\**\*.*" AdditionalMetadata="OutputType=%(webOutput.Filename);ZipName=%(webOutput.zipName)">
      <Output TaskParameter="Include" ItemName="webZipOutput" />
    </CreateItem>

    <!-- zip that shit up -->
    <Zip Files="@(webZipOutput)" ZipFileName="$(buildDir)\%(webZipOutput.ZipName)_$(configuration)_v$(versionString).zip" WorkingDirectory="$(buildDir)\temp\%(webZipOutput.OutputType)" />
  </Target>



  <!-- ========= Public Targets ===================================================== -->

  <Target Name="Build">
    <CallTarget Targets="_CleanBuildDir;Version;Compile;_CopyOutputToTempDir;Test;Zip;_RemoveTempDir" />
  </Target>

  <Target Name="Clean">
    <!-- Clean the entire build directory -->
    <CallTarget Targets="_CleanBuildDir" />

    <!-- Call all builds to clean up -->
    <MSBuild Projects="@(vsbuilds)" Targets="Clean" Properties="Configuration=$(configuration);svnToolPath=$(svnToolPath);buildDir=$(buildDir)" />

    <Exec Command="FOR /F &quot;tokens=*&quot; %%G IN ('DIR /B /AD /S bin') DO RMDIR /S /Q &quot;%%G&quot;" />
    <Exec Command="FOR /F &quot;tokens=*&quot; %%G IN ('DIR /B /AD /S obj') DO RMDIR /S /Q &quot;%%G&quot;" />

    <Delete Files="src\AssemblyInfoCommon.cs" />
    <Delete Files="@(templateFiles -> '%(RootDir)%(Directory)%(Filename)')" />
  </Target>

  <Target Name="CopyTemplateFiles">
    <MSBuild Projects="@(vsbuilds)" Targets="CopyTemplateFiles" Properties="Configuration=$(configuration);svnToolPath=$(svnToolPath);buildDir=$(buildDir)" />

    <CreateItem Include="$(MSBuildProjectDirectory)\**\*.config.temp">
      <Output TaskParameter="Include" ItemName="templateFiles" />
    </CreateItem>

    <Copy SourceFiles="@(templateFiles -> '%(FullPath)')"
          DestinationFiles="@(templateFiles -> '%(RootDir)%(Directory)%(Filename)')"
          Condition="!Exists('%(templateFiles.RootDir)%(templateFiles.Directory)%(templateFiles.Filename)')" />
  </Target>

  <Target Name="Compile" DependsOnTargets="CopyTemplateFiles">
    <MSBuild Projects="@(vsbuilds)" Targets="Compile" Properties="Configuration=$(configuration);svnToolPath=$(svnToolPath);buildDir=$(buildDir)" />
    <MSBuild Projects="@(vssolutions)" Properties="Configuration=$(configuration)" />
  </Target>

  <Target Name="Version">
    <MSBuild Projects="@(vsbuilds)" Targets="Version" Properties="Configuration=$(configuration);svnToolPath=$(svnToolPath);buildDir=$(buildDir)" />

    <SvnVersion
      LocalPath="$(MSBuildProjectDirectory)"
      UseLastCommittedRevision="true"
      ToolPath="$(svnToolPath)">
      <Output TaskParameter="Revision" PropertyName="revision" />
    </SvnVersion>

    <CreateProperty Value="$(major).$(minor).$(build).$(revision)">
      <Output TaskParameter="Value" PropertyName="versionString" />
    </CreateProperty>

    <AssemblyInfo
      CodeLanguage="CS"
      OutputFile="src\AssemblyInfoCommon.cs"
      AssemblyProduct="$(projectName)"
      AssemblyCompany="$(company)"
      AssemblyCopyright="$(copyright)"
      AssemblyConfiguration="$(configuration)"
      ComVisible="false"
      AssemblyVersion="$(versionString)"
      AssemblyFileVersion="$(versionString)"/>
  </Target>

  <Target Name="Test" DependsOnTargets="Compile">
    <MakeDir Directories="$(buildDir)" />
    <MSBuild Projects="@(vsbuilds)" Targets="Test" Properties="Configuration=$(configuration);svnToolPath=$(svnToolPath);buildDir=$(buildDir)" />

    <CreateItem Include="$(MSBuildProjectDirectory)\**\*Tests.csproj">
      <Output TaskParameter="Include" ItemName="tests" />
    </CreateItem>

    <!-- run unit tests -->
    <xunit Condition="@(tests) != ''"
      Assembly="@(tests -> '%(RootDir)%(Directory)bin\$(configuration)\GeoCoding.%(Filename).dll')"
      Html="$(buildDir)\GeoCoding.%(tests.Filename).html" />
  </Target>

  <Target Name="Zip" DependsOnTargets="Compile;_CopyOutputToTempDir">
    <MSBuild Condition="$(includeDependencyOutput) == 'true'" Projects="@(vsbuilds)" Targets="Zip" Properties="Configuration=$(configuration);svnToolPath=$(svnToolPath);buildDir=$(buildDir)" />
    <CallTarget Targets="_ZipBinaryOutput;_ZipWebOutput" />
  </Target>
</Project>